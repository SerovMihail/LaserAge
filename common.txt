Общие требования к заданию 3 по курсу "Технологии программирования"

При выполнении третьего задания команда должна:

1. Проанализировать предметную область
2. Составить эскиз программы с использованием UML
3. Написать программу на языке C++ с использованием системы контроля версий Git

Каждое задание содержит обязательную и дополнительную функциональность. Даже если вы не успеете или не сможете выполнить дополнительную часть задания, её следует рассматривать как перспективы развития проекта и учитывать при проектировании.

Программа должна удовлетворять следующим требованиям:
1. Программа не должна вызывать системных сбоев (crash) или зависать.
2. Программа должна освобождать всю выделенную память.
3. Отсутствие конструкций, приводящих к неопределённому поведению.
4. Переменные должны быть, по возможности, локальны. Не должно быть неиспользуемых переменных.
5. Неизбыточность алгоритма (нет циклов, массивов, ... без которых можно обойтись).

Эти требования должны выполняться, в том числе, при ошибочных или злонамеренных действиях пользователя, а также при неверных входных данных. Чтобы уменьшить вероятность появления подобных проблем, обращайте внимание на предупреждения компилятора. Также рекомендуется использовать анализаторы кода, например, cppcheck.

При написании программы примем следующие стилистические соглашения:
1. Использование английского языка, в том числе, в комментариях. Если по какой-то причине вам всё же понадобится кириллица, то заранее договоритесь об используемой кодировке и настройте все инструменты.
2. Говорящие имена классов, функций, переменных.
3. Имена классов должны быть существительными, соответствующими, по возможности, понятиям предметной области.
4. Имена классов должны начинаться с заглавной буквы.
5. Имена атрибутов и операций должны начинаться со строчной буквы.
6. Составные имена должны быть сплошными, без подчёркиваний, каждое отдельное слово должно начинаться с заглавной буквы.
7. Форматирование кода должно соответствовать правилам: http://zed.karelia.ru/go.to/for.students/coding.rules/rules
8. Явное указание константности методов/аргументов.
9. Старайтесь избегать слишком длинных функций и файлов с кодом.

При использовании системы контроля версий придерживайтесь следующих правил:
1. Не изменяйте коммиты, которые попали в публичный репозиторий.
2. Ветвь master должна содержать достаточно стабильный код. По крайней мере, программа должна собираться и запускаться в любой момент истории ветви master. Не забывайте про возможность отредактировать историю коммитов до того, как она была отправлена на сервер (см. git commit --amend и git rebase -i).
3. Каждый коммит должен быть логически отдельным набором изменений с ясным заголовком и описанием.
4. Не отправляйте в репозиторий файлы, создаваемые при компиляции и файлы пользовательских настроек IDE. За основу можно взять файл .gitignore, использованный во второй работе.
5. Старайтесь минимизировать число версий бинарных файлов в репозитории.

